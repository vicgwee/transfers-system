// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  id,
  balance
) VALUES (
  $1, $2
) RETURNING id, balance, created_at
`

type CreateAccountParams struct {
	ID      int64  `json:"id"`
	Balance string `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg *CreateAccountParams) (*Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(&i.ID, &i.Balance, &i.CreatedAt)
	return &i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const deleteAllAccounts = `-- name: DeleteAllAccounts :exec
DELETE FROM accounts
`

func (q *Queries) DeleteAllAccounts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllAccounts)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, balance, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (*Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Balance, &i.CreatedAt)
	return &i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, balance, created_at FROM accounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (*Account, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(&i.ID, &i.Balance, &i.CreatedAt)
	return &i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET balance = $2
WHERE id = $1
RETURNING id, balance, created_at
`

type UpdateAccountParams struct {
	ID      int64  `json:"id"`
	Balance string `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg *UpdateAccountParams) (*Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(&i.ID, &i.Balance, &i.CreatedAt)
	return &i, err
}
